### Huffman Text Decoder Kevin Chin 11/09/2018
### This script decodes/translates the binary code generated by Encoder.py back into text
### using the Huffman Tree generated by HuffmanTreeGenerator.py
from HuffmanTreeGenerator import *


### PUT THE COMPRESSED BINARY TO DECODE HERE:
decodeThis = "000111001011010011100111110111000010111111110000001011111000111001101100111110001101010110110111010011010" \
             "010000101001010100110111100111101001101100001100111010011110111101011000101101111100111101000111110000011" \
             "010101011000110110100001110111001010000001011110010000011011100101111110110000101100010110111100110010000" \
             "101011001111110010100001010110001100100001100111100111101010111101111010000011110000001011111101111101010" \
             "001100010101001000111011011110111111100110111100111101001101100001100111010011100010001000111011111111000" \
             "001101010001101011100101001110110110111111010010000110011111001000011101110101110101010011011110001101110" \
             "001011010011111000110100011010000111101011101001101111000011101001111011110111101101101111110011010000001" \
             "101101010001101111000010100001001110010100000010111100111101000111110000011010101010010010001110100010001" \
             "101110011101111000011101111000011101001111011111001000001101110010111111000110001001100110011110000110110" \
             "110110001110000111011111001111101101111011111100101000111101111010110001011010101000011100010100111111000" \
             "110100010100000100101000000101110000110110010001111110010011111100001010011001010101001101110000100101011" \
             "110111111100010100111111000100010110001011011110101110100110111101101110001111110111101100010110011110111" \
             "001000000110101010000111101101011111101100010000111011100101000000101001011111001000001101110010111111000" \
             "110001011001110011110000011011111100110111101000001100101111010111010011010011111101101101010000110111111" \
             "001011001111010010111101111111001101111010000011000010101100011001000011001110010100011101011101001101001" \
             "111111010101111011100111101011101001101100100100111101111101101010101110110000101000000101110000000101000" \
             "110101010000111101001100000010111001011111001101001001000001110110001001000110000100101000000101110010100" \
             "011101111011011011110110001000011000110111000010010011110110111010111010011011111100000110101110000111011" \
             "101100011100000010111110100001100000110010101000011110100001111011001111010101001111111010100011101111011" \
             "011011110001000110100110011100110010111110111001011001011111011000001010000001011101111010111101001101001" \
             "111110011101001100010101000110010011111011111100110101000000100101010010001101101101100011101011101001101" \
             "111110010100001001100111010111010011011111011110101010000110110101100111010011100000110111001110011001011" \
             "111001101110000110110001011001110001111101001111010110011101101100001100110100111000110101000111101101110" \
             "000001011111110000000111101010001111011001010000111101101011111101011101001101111101101101010000110110011" \
             "100100111100101111011000100001110111001010000001010010111101011101001101111101111010101000011011111000111" \
             "110100111001111101110000101111110111101010000010000101011001110101010010001110110111101111111001101111001" \
             "111010011011000011001110100111000011010000000100100010010111111001011100111010100000010110100111110111101" \
             "100100100011101001000010111010100011011111001101110001101000101000001010101100011010101101101111110011011" \
             "001000011110111001111000000101111101100001111010100000001100110010111110011011110110101011000111110111101" \
             "111011001000111111110011010000001101011000100010111111001101001001101111011111111001101100100001111011111" \
             "011011010011111101101010000001101010101001101111001111010011011000011001110100111101111010110001011011001" \
             "011110111101011111000010100001100110101111100000101000111101111011110110010010001111001000001101110010111" \
             "111000000101111111001110111000010011110101111100101010000111010110101111100001010000110011010111111011110" \
             "101100010110110010111101111010111110000101000011001101011111110000110110001010111011000011110110001111010" \
             "100111111101001101001111110100000110000101010010001110111101000011110111111001011100101011110111111000110" \
             "001001100110011001011111100000011010111111000011101100100100111101111110011010111001010001111011110101100" \
             "010110101010000111011000100001010110011100101000000101110100000100100001010001100101111110100101111011111" \
             "110100110001100110010101010011011100011010001010000011110000111011001001101111011111111000001101111010010" \
             "111001100100001010110011111101111011000101100111101110010000001101010101100011011010000111011100101000000" \
             "101001011111001000001101110010111111101101010101110110011100000010111111011001001000011000101000011111101" \
             "111000000101111100010001000111011110010111110011010010011011110111111110000011011110101110100110100111110" \
             "000001001000010101001101111100111011101111000000101111110011101101011101101001111011110010100011101011101" \
             "001101001111111010101111011100101010000111101001100000010111001011111001101001001000001110110001001000110" \
             "000100101000000101110010100011101111011011011110110001000011000110100101111000010010011110110111010111010" \
             "011011111100000110101110000111011101100011100000010111110100001100000110010101000011110100001111011001111" \
             "010101001111111010100011101111011011011110001000110100110011100110010111110111001011001011111011000001010" \
             "000001011101111010111101001101001111110011101001100010101000110010011111011111100110101000000100101010010" \
             "001101101101100011110011011111001010000001111010111010011011110010100011101111011001000111111011000011110" \
             "111001110011001011111011110101010000110001010000001011111001101011111000001101010001101011100101001110110" \
             "110111010101001101110110010101000100100101111110110011011100111010011110001011011110111101100010110011001" \
             "011110110001000011101110010100000010100101111010111010011011111011110101010000110111110001111101001110011" \
             "111011100001011111101111010100000100001010110011101010000111101001100000010111001011111001101001001000001" \
             "110110001001000110000100101000000101110010100011101111011011011110110001000011000110100101111000010010011" \
             "110110111010111010011011111100000110101110000111011101100011100000010111110100001100000110010101000011110" \
             "100001111011001111010101001111111010100011101111011011011110001000110100110011100110010111110111001011001" \
             "011111011000001010000001011101111010111101001101001111110011101001100010101000110010011111011111100110101" \
             "000000100101010011011110110010011000101101111100111010000100111101101110010100011100001101100100011111110" \
             "011011111001110111010101000011100010100000111110011011100011010001010000011111001101111011001001100010110" \
             "111100000110101111110100100011101001000000101101101111110010100011111000111110100111100110101000010101100" \
             "011001000011001111100110110110111110111101010100001101100111111000111110100111001111101110000101110101010" \
             "011011101100101010001001001011111101100110111001110100111100010110111101111011000101100101010000111011110" \
             "100110111110111101010100001101111100011111010011100111110111000010111111011110101000001000010101100111"
# Example: decodeThis = "111001000111110111110111111000111100110110100001010111100000100101001101001110101000101"



MT = MasterTree #make a local reference to the Huffman Tree from HuffmanTreeGenerator.py


## Recursive function to decode binary code into characters
def decodeBinary(node, binary):
    if isinstance(node, Char):                 #Base case for reaching a leaf (a leaf is class Char)
        if len(binary) is 0:
            return node.character
        else:
            return node.character + binary     #return the decoded character and the rest of the binary code
    else:
        if binary[0] is "0":
            return decodeBinary(node.left, binary[1:])  #if current character of binary string is 0, go left
        elif binary[0] is "1":
            return decodeBinary(node.right, binary[1:]) #if current character of binary string is 1, go right
        else:
            return decodeBinary(node, binary[1:])       #fail case (i.e. binary has characters other than 0 or 1)


#Declare the variable to output as final output
finalString = ""

while len(decodeThis) > 0:                           #while there is binary code left to decode
    letter_and_rest = decodeBinary(MT, decodeThis)   #get the decoded character and rest of the binary code
    finalString = finalString + letter_and_rest[0]   #update the finalString with the decoded character
    decodeThis = letter_and_rest[1:]                 #remove the decoded character from the string

#Printed the text decoded from the binary code
print(finalString)
